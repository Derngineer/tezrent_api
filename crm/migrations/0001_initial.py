# Generated by Django 5.2.7 on 2025-10-21 06:40

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('equipment', '0001_initial'),
        ('rentals', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_type', models.CharField(choices=[('general', 'General Note'), ('preference', 'Customer Preference'), ('warning', 'Warning/Alert'), ('credit', 'Credit Information'), ('payment', 'Payment History'), ('behavior', 'Customer Behavior')], default='general', max_length=20)),
                ('subject', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('is_important', models.BooleanField(default=False, help_text='Pin this note')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='crm_notes', to='accounts.companyprofile')),
                ('created_by', models.ForeignKey(limit_choices_to={'user_type': 'staff'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_notes', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='crm_notes', to='accounts.customerprofile')),
            ],
            options={
                'ordering': ['-is_important', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('min_rental_count', models.PositiveIntegerField(blank=True, null=True)),
                ('min_total_spent', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('companies', models.ManyToManyField(blank=True, related_name='segments', to='accounts.companyprofile')),
                ('customers', models.ManyToManyField(blank=True, related_name='segments', to='accounts.customerprofile')),
                ('preferred_categories', models.ManyToManyField(blank=True, related_name='customer_segments', to='equipment.category')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('company_name', models.CharField(blank=True, max_length=255)),
                ('source', models.CharField(choices=[('website', 'Website Form'), ('phone', 'Phone Call'), ('email', 'Email Inquiry'), ('social_media', 'Social Media'), ('referral', 'Referral'), ('advertisement', 'Advertisement'), ('exhibition', 'Exhibition/Event'), ('walk_in', 'Walk In'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('new', 'New Lead'), ('contacted', 'Contacted'), ('qualified', 'Qualified'), ('proposal_sent', 'Proposal Sent'), ('negotiation', 'In Negotiation'), ('converted', 'Converted to Customer'), ('lost', 'Lost'), ('unqualified', 'Unqualified')], default='new', max_length=20)),
                ('interest_level', models.CharField(choices=[('hot', 'Hot - Ready to Rent'), ('warm', 'Warm - Interested'), ('cold', 'Cold - Just Browsing')], default='warm', max_length=10)),
                ('estimated_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated rental budget per month', max_digits=10, null=True)),
                ('rental_duration_needed', models.CharField(blank=True, help_text="e.g., '1 week', '3 months'", max_length=100)),
                ('project_description', models.TextField(blank=True)),
                ('country', models.CharField(blank=True, max_length=3)),
                ('city', models.CharField(blank=True, max_length=3)),
                ('next_follow_up', models.DateTimeField(blank=True, null=True)),
                ('last_contacted', models.DateTimeField(blank=True, null=True)),
                ('converted_at', models.DateTimeField(blank=True, null=True)),
                ('lost_reason', models.TextField(blank=True)),
                ('competitor_name', models.CharField(blank=True, max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'staff'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_leads', to=settings.AUTH_USER_MODEL)),
                ('converted_to_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='originated_from_lead', to='accounts.customerprofile')),
                ('interested_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='interested_leads', to='equipment.category')),
                ('interested_equipment', models.ManyToManyField(blank=True, related_name='interested_leads', to='equipment.equipment')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('call', 'Phone Call'), ('email', 'Email'), ('meeting', 'In-Person Meeting'), ('video_call', 'Video Call'), ('chat', 'Live Chat'), ('whatsapp', 'WhatsApp'), ('sms', 'SMS'), ('note', 'Internal Note')], max_length=20)),
                ('subject', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('outcome', models.CharField(blank=True, choices=[('successful', 'Successful'), ('follow_up_needed', 'Follow-up Needed'), ('no_answer', 'No Answer'), ('voicemail', 'Left Voicemail'), ('not_interested', 'Not Interested'), ('information_sent', 'Information Sent')], max_length=20, null=True)),
                ('interaction_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('requires_follow_up', models.BooleanField(default=False)),
                ('follow_up_date', models.DateTimeField(blank=True, null=True)),
                ('follow_up_completed', models.BooleanField(default=False)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='crm/interactions/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='crm_interactions', to='accounts.companyprofile')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='crm_interactions', to='accounts.customerprofile')),
                ('handled_by', models.ForeignKey(limit_choices_to={'user_type': 'staff'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer_interactions', to=settings.AUTH_USER_MODEL)),
                ('lead', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='crm.lead')),
            ],
            options={
                'ordering': ['-interaction_date'],
            },
        ),
        migrations.CreateModel(
            name='SalesOpportunity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for this opportunity', max_length=255)),
                ('description', models.TextField(blank=True)),
                ('estimated_value', models.DecimalField(decimal_places=2, help_text='Estimated total rental value', max_digits=10)),
                ('rental_start_date', models.DateField(blank=True, null=True)),
                ('rental_end_date', models.DateField(blank=True, null=True)),
                ('rental_duration_months', models.PositiveIntegerField(blank=True, null=True)),
                ('stage', models.CharField(choices=[('prospecting', 'Prospecting'), ('qualification', 'Qualification'), ('needs_analysis', 'Needs Analysis'), ('proposal', 'Proposal/Quote Sent'), ('negotiation', 'Negotiation'), ('closed_won', 'Closed Won'), ('closed_lost', 'Closed Lost')], default='prospecting', max_length=20)),
                ('probability', models.PositiveIntegerField(choices=[(10, '10% - Prospecting'), (25, '25% - Qualification'), (50, '50% - Needs Analysis'), (75, '75% - Proposal Sent'), (90, '90% - Negotiation'), (100, '100% - Closed Won'), (0, '0% - Closed Lost')], default=25, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('expected_close_date', models.DateField(blank=True, null=True)),
                ('actual_close_date', models.DateField(blank=True, null=True)),
                ('lost_reason', models.TextField(blank=True)),
                ('competitor_name', models.CharField(blank=True, max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(limit_choices_to={'user_type': 'staff'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sales_opportunities', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='opportunities', to='accounts.companyprofile')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='opportunities', to='accounts.customerprofile')),
                ('equipment_items', models.ManyToManyField(related_name='sales_opportunities', to='equipment.equipment')),
                ('lead', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opportunities', to='crm.lead')),
                ('won_rental', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='originated_opportunity', to='rentals.rental')),
            ],
            options={
                'verbose_name_plural': 'Sales Opportunities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.CharField(blank=True, max_length=20, unique=True)),
                ('subject', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('equipment_issue', 'Equipment Issue'), ('billing', 'Billing Question'), ('delivery', 'Delivery/Pickup Issue'), ('rental_inquiry', 'Rental Inquiry'), ('technical_support', 'Technical Support'), ('complaint', 'Complaint'), ('feedback', 'Feedback'), ('return_issue', 'Return Issue'), ('damage_claim', 'Damage Claim'), ('other', 'Other')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('waiting_customer', 'Waiting on Customer'), ('waiting_internal', 'Waiting on Internal Team'), ('resolved', 'Resolved'), ('closed', 'Closed'), ('reopened', 'Reopened')], default='open', max_length=20)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('resolution', models.TextField(blank=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('customer_rating', models.PositiveIntegerField(blank=True, help_text='Customer satisfaction rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('customer_feedback', models.TextField(blank=True)),
                ('response_due', models.DateTimeField(blank=True, null=True)),
                ('resolution_due', models.DateTimeField(blank=True, null=True)),
                ('first_response_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'staff'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to='accounts.companyprofile')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to='accounts.customerprofile')),
                ('related_equipment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='support_tickets', to='equipment.equipment')),
                ('related_rental', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='support_tickets', to='rentals.rental')),
                ('resolved_by', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'staff'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('is_internal', models.BooleanField(default=False, help_text='Internal note not visible to customer')),
                ('attachment', models.FileField(blank=True, null=True, upload_to='crm/tickets/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_comments', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='crm.supportticket')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['status', 'interest_level'], name='crm_lead_status_97e322_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['assigned_to', 'next_follow_up'], name='crm_lead_assigne_45d2b7_idx'),
        ),
        migrations.AddIndex(
            model_name='customerinteraction',
            index=models.Index(fields=['interaction_date'], name='crm_custome_interac_e0194e_idx'),
        ),
        migrations.AddIndex(
            model_name='customerinteraction',
            index=models.Index(fields=['requires_follow_up', 'follow_up_date'], name='crm_custome_require_935be6_idx'),
        ),
        migrations.AddIndex(
            model_name='salesopportunity',
            index=models.Index(fields=['stage', 'probability'], name='crm_salesop_stage_3d2e54_idx'),
        ),
        migrations.AddIndex(
            model_name='salesopportunity',
            index=models.Index(fields=['expected_close_date'], name='crm_salesop_expecte_050d71_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['status', 'priority'], name='crm_support_status_0be19b_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['assigned_to', 'status'], name='crm_support_assigne_87d15a_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['created_at'], name='crm_support_created_da7b14_idx'),
        ),
    ]
